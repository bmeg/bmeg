  ##
  # oath setup
  ##
  lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
  lua_ssl_verify_depth        5;

  set_by_lua $ngo_callback_host '
    if os.getenv("NGO_CALLBACK_HOST") then
      return os.getenv("NGO_CALLBACK_HOST")
    else
      return ngx.var.host
    end
  ';

  set_by_lua $ngo_callback_scheme    'return os.getenv("NGO_CALLBACK_SCHEME")';
  set_by_lua $ngo_callback_uri       'return os.getenv("NGO_CALLBACK_URI")';
  set_by_lua $ngo_signout_uri        'return os.getenv("NGO_SIGNOUT_URI")';
  set_by_lua $ngo_client_id          'return os.getenv("NGO_CLIENT_ID")';
  set_by_lua $ngo_client_secret      'return os.getenv("NGO_CLIENT_SECRET")';
  set_by_lua $ngo_token_secret       'return os.getenv("NGO_TOKEN_SECRET")';
  set_by_lua $ngo_secure_cookies     'return os.getenv("NGO_SECURE_COOKIES")';
  set_by_lua $ngo_http_only_cookies  'return os.getenv("NGO_HTTP_ONLY_COOKIES")';
  set_by_lua $ngo_extra_validity     'return os.getenv("NGO_EXTRA_VALIDITY")';
  set_by_lua $ngo_domain             'return os.getenv("NGO_DOMAIN")';
  set_by_lua $ngo_whitelist          'return os.getenv("NGO_WHITELIST")';
  set_by_lua $ngo_blacklist          'return os.getenv("NGO_BLACKLIST")';
  set_by_lua $ngo_user               'return os.getenv("NGO_USER")';
  set_by_lua $ngo_email_as_user      'return os.getenv("NGO_EMAIL_AS_USER")';


  ##
  # oauth callback
  ##
  location /_oauth {
    include /etc/nginx/protected.conf;
  }
  location /_signout {
    include /etc/nginx/protected.conf;
  }
  location /_token.txt {
    include /etc/nginx/protected.conf;
  }
  location /_token.json {
    include /etc/nginx/protected.conf;
  }
  location /_token.curl {
    include /etc/nginx/protected.conf;
  }

  ##
  # whitelist
  ##

  location ~ /v1/(.*/schema)$ {
    add_header Allow "GET, HEAD" always;
    limit_except GET HEAD {
      deny all;
    }
    proxy_buffering off;
    proxy_pass http://grip:8201/v1/$1;
    break;
  }
  location ~ /v1/(.*/label)$ {
    add_header Allow "GET, HEAD" always;
    limit_except GET HEAD {
      deny all;
    }
    proxy_buffering off;
    proxy_pass http://grip:8201/v1/$1;
    break;
  }
  location ~ /v1/(graph)/?$ {
    add_header Allow "GET, HEAD" always;
    limit_except GET HEAD {
      deny all;
    }
    proxy_buffering off;
    proxy_pass http://grip:8201/v1/$1;
    break;
  }

  ##
  # protected
  ##

  # our protected "landing page"
  location /analyze/access {
    include /etc/nginx/protected.conf;
    root /usr/share/nginx/bmeg.io;
    try_files $uri $uri/index.html $uri.html =404;
  }
  location ~ /v1/(.*/query)$ {
    add_header Allow "POST, HEAD" always;
    limit_except POST HEAD {
      deny all;
    }
    include /etc/nginx/protected.conf;
    proxy_buffering off;
    proxy_pass http://grip:8201/v1/$1;
  }
  location /grip/ {
    add_header Allow "GET, HEAD" always;
    limit_except GET HEAD {
      deny all;
    }
    include /etc/nginx/protected.conf;
    proxy_pass http://grip:8201/;
  }
  location /api/ {
    add_header Allow "GET, HEAD" always;
    limit_except GET HEAD {
      deny all;
    }
    include /etc/nginx/protected.conf;
    proxy_pass http://grip:8201/;
  }
  location /v1/ {
    add_header Allow "GET, HEAD" always;
    limit_except GET HEAD {
      deny all;
    }
    include /etc/nginx/protected.conf;
    proxy_pass http://grip:8201/v1/;
  }

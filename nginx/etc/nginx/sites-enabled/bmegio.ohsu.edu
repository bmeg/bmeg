lua_package_path '/etc/nginx/lua/?.lua;';

# redirect to https
server {
	listen *:80;
  server_name bmegio.ohsu.edu;
	return 301 https://$host$request_uri;
}

server {
  listen 443 ssl http2;
  listen [::]:443 ssl http2;

  server_name bmegio.ohsu.edu;
  ssl_certificate /etc/letsencrypt/live/bmegio.ohsu.edu/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/bmegio.ohsu.edu/privkey.pem;

  ##
  # oath setup
  ##
  lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
  lua_ssl_verify_depth        5;
  set_by_lua $ngo_callback_host '
    if os.getenv("NGO_CALLBACK_HOST") then
      return os.getenv("NGO_CALLBACK_HOST")
    else
      return ngx.var.host
    end
  ';

  set_by_lua $ngo_callback_scheme    'return os.getenv("NGO_CALLBACK_SCHEME")';
  set_by_lua $ngo_callback_uri       'return os.getenv("NGO_CALLBACK_URI")';
  set_by_lua $ngo_signout_uri        'return os.getenv("NGO_SIGNOUT_URI")';
  set_by_lua $ngo_client_id          'return os.getenv("NGO_CLIENT_ID")';
  set_by_lua $ngo_client_secret      'return os.getenv("NGO_CLIENT_SECRET")';
  set_by_lua $ngo_token_secret       'return os.getenv("NGO_TOKEN_SECRET")';
  set_by_lua $ngo_secure_cookies     'return os.getenv("NGO_SECURE_COOKIES")';
  set_by_lua $ngo_http_only_cookies  'return os.getenv("NGO_HTTP_ONLY_COOKIES")';
  set_by_lua $ngo_extra_validity     'return os.getenv("NGO_EXTRA_VALIDITY")';
  set_by_lua $ngo_domain             'return os.getenv("NGO_DOMAIN")';
  set_by_lua $ngo_whitelist          'return os.getenv("NGO_WHITELIST")';
  set_by_lua $ngo_blacklist          'return os.getenv("NGO_BLACKLIST")';
  set_by_lua $ngo_user               'return os.getenv("NGO_USER")';
  set_by_lua $ngo_email_as_user      'return os.getenv("NGO_EMAIL_AS_USER")';



  # content
  location / {
    root /usr/share/nginx/html;
    try_files $uri $uri/index.html $uri.html =404;
  }
  # data
  location /bmeg-data {
    alias /usr/share/nginx/data/; # directory to list
    autoindex on;
  }
  # for certbot challenge
  location /.well-known/acme-challenge/ {
      root /var/www/certbot;
  }

  ##
  # oauth callback
  ##
  location /_oauth {
    include /etc/nginx/protected.conf;
  }
  location /_signout {
    include /etc/nginx/protected.conf;
  }
  location /_token.txt {
    include /etc/nginx/protected.conf;
  }
  location /_token.json {
    include /etc/nginx/protected.conf;
  }
  location /_token.curl {
    include /etc/nginx/protected.conf;
  }

  ##
  # protected
  ##

  # our protected "landing page"
  location /analyze/access {
    include /etc/nginx/protected.conf;
    root /usr/share/nginx/html;
    try_files $uri $uri/index.html $uri.html =404;
  }
  location /grip/ {
    proxy_pass http://grip:8201/;
  }
  # /api/v1/graph/<graph>/query
  location ~ ^/api/(.*/query) {
    proxy_buffering off;
    proxy_pass http://grip:8201/$1;
  }
  location /api/ {
    proxy_pass http://grip:8201/;
  }
  location /v1/ {
    proxy_pass http://grip:8201/v1/;
  }
}
